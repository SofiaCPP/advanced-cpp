layout: slides
title: The practice of C++
path: /slides/02_practice.html
date: 2015-03-03 23:37:34
tags: slides
categories: slides
---
section
    :markdown-it
        # The practice of `C++`

section
    :markdown-it
        ## Contents

        1. Source code
        2. Building
        3. Static Analysis
        4. Runtime Analysis
        5. Tests

section
    section
        :markdown-it
            ## Source Code

    section
        :markdown-it
            ## Coding Style

            * [Google](http://google-styleguide.googlecode.com/svn/trunk/cppguide.html)
            * [JSF-AV](http://www.stroustrup.com/JSF-AV-rules.pdf)
            * http://meetingcpp.com/index.php/talkview/items/24.html

    section
        :markdown-it

            * Choose one coding style and stick to it
            * Whenever necessary change it.

    section
        :markdown-it
            ## IDEs or text editors

            

    section
        :markdown-it
            ### Platform specific

            * Visual Studio
            * xcode
            * kdevelop

    section
        :markdown-it
            ### Cross-platform

            * qtcreator
            * Eclipse with CDT
    section
        :markdown-it
            ### New players

            * [CLion](https://www.jetbrains.com/clion/)

    section
        :markdown-it
            ## Basic Text settings

    section
        :markdown-it
            # CONSISTENCY

    section
            Not that easy when working on multiple projects / codebases with
            different styles

    section
        ul
            li [Editor Config](http://editorconfig.org/)
            
    section
        :markdown-it
            ### CodeMaid

            [CodeMaid](http://codemaid.net) is an open-source extension
            that allows code cleanup and reorganizing.

    section
        :markdown-it
            ### clang-format

            * portable, stand-alone tool
            * plugins for Vim, Emacs, Visual Studio, Git
            * uses ```clang+++``` AST to reformat the code
            * allows to specify different formatting rules for different files

section
    section
        :markdown-it
            ## Building

    section
        :markdown-it
            * C++ doesn't have build system

    section
        :markdown-it
            ### built-in in the IDE

            * Visual Studio project files
            * Xcode project files
            * qtcreator - qmake

    section
        :markdown-it
            ### standalone - low level

            * make - in all the ports and flavours
            * [ninja](https://ninja-build.org/)

    section
        :markdown-it
            ### stanalone - high level

            * cmake - can generate everything
            * gyp 
            * premake5 - Visual Studio, make, xcode soon
            * [genie](https://github.com/bkaradzic/genie)
           
    section
        :markdown-it
            ### Distributed

            * [fips](http://floooh.github.io/fips/index.html)
            * [fastbuild](http://www.fastbuild.org/docs/home.html)
            * Incredibuild

section
    section
        :markdown-it

            ## Libraries

    section
        :markdown-it
            ### Program configuration

            * boost::program_options
            * [gflags](https://gflags.github.io/gflags/)
            * ['cxxopts'](https://github.com/jarro2783/cxxopts)
            * boost::property_tree
            * [docopt](https://github.com/docopt/docopt.cpp)

    section
        :markdown-it
            ### Logging

            * [`boost::log`](https://github.com/boostorg/log)
            * google log

    section
        :markdown-it
            ### Data Persistance

            * dropbox json11
            * `boost::serialization`

    section
        :markdown-it
            ### Testing

            * googletest and googlemock
            * `boost::test` and turtle
            * [catch](https://github.com/philsquared/Catch)
            * [liblittletest](https://github.com/etr/liblittletest)

    section
        :markdown-it
            ### Microbenchmarking

            * [benchmark](https://github.com/google/benchmark)
            * [Celero](https://github.com/DigitalInBlue/Celero)

    section
        :markdown-it
            ### Graphics

            * DirectX / OpenGL 
            * SFML
            * SDL
            * cairo / Skia

    section
        :markdown-it
            ### GUI

            * Qt
            * WxWidgets
            * GTK
            * Win32
            * IUP
            * fltk
 
    section
        :markdown-it
            ### Text

            * `boost::spirit`
            * `boost::karma`
            * ctemplate

    section
        :markdown-it
            ### Image processing

            * lodepng

    section
        :markdown-it
            ### Scripting

            * Lua, luajit
            * duktape, v8
            * python - `boost::python`, cython

    section
        :markdown-it
            ### Networking

            * `boost::asio` - tcp and udp
            * curl
            * cpp-netlib
            * C++ REST (https://casablanca.codeplex.com/)
            * mongoose

section
    section
        :markdown-it
            ## Static code analysis

            Tries to run *all* possible code paths in the program in order
            to locate errors.

    section
        :markdown-it
            ### False positives

            It may find so many "errors" that is impossible to check all of
            them.

    section
        :cxx
            void generate(int* output); // third party

            std::unique_ptr<int[]> p(new int[1024]);

            generate(p.get()); // reading uninitialized memory
            std::cout << p[24]; // reading uninitialized memory

    section
        :markdown-it
            ### Visual Studio

            * Starting *VS2013* in all versions

    section
        :markdown-it
            ### PVS-Studio

            * commercial tool
            * [Interesting blog](http://www.viva64.com/en/b/) with
              analysis of C++ projects

    section
        :markdown-it
            ### clang++ --analyze

            Runs *clang* in static analyzer mode

            * scan-build

    section
        :markdown-it
            ### Runtime analysis

            * valgrind
            * address sanitizer
    
    section
        :markdown-it

            ### Debuggers

            * Visual Studio / xcode
            * `ddd`


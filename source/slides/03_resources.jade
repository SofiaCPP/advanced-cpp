layout: slides
title: Resource Management
date: 2015-03-07 23:30:00
tags: slides
---
include snippet

section
    h1 Resource Management in C++

section
    section
        h2 Resources

    section
        h3 Resources are finite

    section
        h3 What is a resource?
        ul
            li Memory
            li Files
            li Sockets
            li Threads
            li ...

        aside.notes.

            Memory is the most often used and miss-used resource in a computer.
            GC languages focus on taking memory management out of the hands of
            the programmer. But they leave everything else, and, IMHO, they make
            it harder. Open files in a process or OS are limited. Sockets can't
            be more than 65536 for a given IP address.

    section
        :markdown
            ### Garbage collection

            Garbage collection works only for memory. It does **not** work for
            other resources because it is generally not deterministic.
    section
        :markdown
            All GC languages have (some got at a later point) language
            constructs to allow deterministic resource management.

    section
        h4 Python
        :code
            with open('file.txt') as file:
                for line in file:
                    pass

    section
        h4 C#
        :code
            // `IDisposable` interface

            using (Font font1 = new Font("Arial", 10.0f))
            {
                byte charset = font1.GdiCharSet;
            }

    section
        h4 Go
        :code
            func Contents(filename string) (string, error) {
                f, err := os.Open(filename)
                if err != nil {
                    return "", err
                }
                defer f.Close()  // f.Close will run when we're finished.


section
    h2 Lifetime of an object
    ul
        li.fragment.fade-in starts with completion of the constructor
        li.fragment.fade-in ends with the completion of the destructor

section
    h2 Automatic variables
    p.fragment.fade-in.

        Automatic variable is is allocated and deallocated when the
        program flow enters and leaves the variable's context.

    p.fragment.fade-in
        | Variable's context is the scope of its declaration

section
    section
        h2 Scope of a variable

    section
        :cxx
            void function() {
                std::ifstream f("input.txt");
            } // f is destroyed here

    section
        :cxx
            void function() {
                // ...
                {
                    std::ifstream f("input.txt");
                } // f is destroyed here
                // ...
            }

    section
        +snippet('03_resources/input.cxx')

    section
        +snippet('03_resources/inputstl.cxx')

    section
        :cxx
            void function()
            {
                if (int x = rand()) {
                    std::cout << x << std::endl;
                } else {
                    std::cout << "random 0" << std::endl;
                } // x is destroyed here
            }

    section
        :cxx
            class Logger
            {
                private:
                    std::ifstream _input;
            };
            // input gets created when a Logger instance gets created
            // input gets destroyed when the instance is destroyed

    section
        :cxx
            class Logger
            {
                private:
                    static std::ifstream _input;
            };
            // input gets created sometime before executing main
            // input gets destroyed sometime after main has finished

    section
        :cxx
            int main() {
            }
            std::ofstream input("input.txt");
            // input gets created sometime before executing main
            // input gets destroyed sometime after main has finished

    section
        :cxx
            void function() {
                static std::ofstream input("input.txt");
                // input gets created first time executing the function
            }
            // input gets destroyed sometime after main has finished

section
    h2 non-automatic variables
    :cxx
        // ...
        std::ifstream* input = new std::ifstream("input.txt");
        // ...
        delete input; // <-- input gets destroyed here

section
    h2 Automatic variables are cool
    ul
        li deterministic* lifetime
        li always* get destroyed
        li * - non-static automatic variables

section
    h2 RAII
    h2 Resource Acquisition is Initialization
    p
        ul
            li.fragment.fade-in.

                Obtain the resource in the constructor of an automatic
                variable

            li.fragment.fade-in.

                Free the resource in the destructor of an automatic
                variable

section
    +snippet('03_resources/lifetime.cxx', 'lifetime')
    pre.fragment.fade-in
        code.
            Lifetime:       0x7fffc7c7552f: lives
            Lifetime:       0x7fffc7c7552f: dies

section
    +snippet('03_resources/lifetime.cxx', 'never-member')
    pre.fragment.fade-in
        code.
            Lifetime:       0x7fffc7c7552e: lives
            NeverMember:    0x7fffc7c7552e: is about to live
            Lifetime:       0x7fffc7c7552e: dies
            exception:not this time

section
    +snippet('03_resources/lifetime.cxx', 'never-base')
    pre.fragment.fade-in
        code.
            Lifetime:       0x7fffc7c7552d: lives
            NeverMember:    0x7fffc7c7552d: is about to live
            Lifetime:       0x7fffc7c7552d: dies
            exception:not this time

section
    h2 Lifetime of a local reference

section
    +snippet('03_resources/lifetime.cxx', 'reference')
    pre.fragment.fade-in
        code.
            Lifetime:       0x7fffcbf05d67: lives
            Reference to 0x7fffcbf05d67
            Lifetime:       0x7fffcbf05d67: dies

section
    h2 Leaking

section
    +snippet('03_resources/lifetime.cxx', 'leak')
    pre.fragment.fade-in
        code.
            Lifetime:       0x119d010:      lives
            Leaking:        0x7fff49285b00: lives
            exception: it all goes wrong

section
    | Resource management is difficult not only in presence of exceptions

section
    :cxx
        bool HasEmbededNull(const char* file)
        {
            std::ifstream input(file, std::ios::binary);
            while (input) {
                if (input.get() == '\0') {
                    return true;
                }
            }
            return false;
        }

section
    :cxx
        bool HasEmbededNull(const char* file)
        {
            auto input = std::fopen(file, "rb");
            while (input && !feof(input)) {
                if (fgetc(input) == '\0') {
                    return true;
                }
            }
            fclose(input);
            return false;
        }

section
    :cxx
        bool HasEmbededNull(const char* file)
        {
            auto input = std::fopen(file, "rb");
            while (input && !feof(input)) {
                if (fgetc(input) == '\0') {
                    fclose(input); // !!!!!!!!!!!
                    return true;
                }
            }
            fclose(input);
            return false;
        }

section
    h2 So the moral is?
    p.fragment.fade-in.
        ALWAYS manage resources following RAII!
    p.fragment.fade-in.
        NEVER STORE a resource by a plain pointer!

    aside.notes.

        By STORE we mean own - if you are just having a reference to use -
        then it is OK to be stored by a plain pointer. EXAMPLE!


